first_name = 'Joffrey'
greeting = 'Hello'

template = "{}, {}!"

print(template.format(greeting, first_name))
# => 'Hello, Joffrey!'

# Мы просто создали специальную строку (template) — так называемый "шаблон" — и разместили в ней несколько "пробелов" — пар фигурных скобок ({}).
# Затем с помощью применения операции .format() мы восполнили пробелы значениями переменных - по одной переменной на каждый "пробел" ({}).
# В одном шаблоне можно оставлять несколько "пробелов", но важно затем их заполнить все за один раз — подставить сразу нужное количество переменных.

def show_date(month, day):
    print('Today is: {} {}'.format(month, day))

show_date('January', '29')



result = 'Today is %s %d' % ('February', 8)
print(result) # => Today is February 8
# Слева от оператора % находится строка-шаблон, в которой кроме самого текста могут присутствовать специальные заполнители.
# Это «заглушки» для информации, которая передаётся аргументом справа. %s означает «заглушка для строки», %d — для числа.
# Поэтому справа находится пара значений — строка и число.


# При выводе дат иногда требуется фиксировать количество цифр, скажем, всегда писать нули перед числом если число меньше 10.
# % позволяет решить эту задачу:

result = 'Today is %s %02d' % ('February', 8)
print(result) # => Today is February 08
# %02d — сделать две цифры и заполнить нулями оставшееся пространство. %03d — три цифры, и так далее:

vresult = 'Today is %s %04d' % ('February', 8)
print(result) # => Today is February 0008


def concat2():
    z = "%s%s" % (x, y)
    return z